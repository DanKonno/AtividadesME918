## Apresentando os bancos de dados (2)
table1
## Carregando o pacote tidyverse (1)
library(tidyverse)
## Apresentando os bancos de dados (2)
table1
table2
table3
table4a
table2
## Apresentando o número de casos por ano (4)
table1 %>%
group_by(year) %>%
summarise(casos_tot = sum(cases))
table1 %>%
group_by(country) %>%
summarise(casos_totais = sum(cases))
table1 %>%
group_by(country) %>%
summarise(diferenca = diff(cases))
taxas %>%
ggplot(aes(x = year, y = taxa, colour = country)) +
geom_line() +
scale_x_continuous(breaks = c(1999, 2000)) +
labs(x = "Ano", y = "Taxa de Tuberculose por 10 mil habitantes", colour = "País") +
theme_bw()
taxas = table1 %>%
mutate(taxa = cases/population*10000)
taxas %>%
ggplot(aes(x = year, y = taxa, colour = country)) +
geom_line() +
scale_x_continuous(breaks = c(1999, 2000)) +
labs(x = "Ano", y = "Taxa de Tuberculose por 10 mil habitantes", colour = "País") +
theme_bw()
taxas %>%
ggplot(aes(x = year, y = taxa, colour = country)) +
geom_line() +
scale_x_continuous(breaks = c(1999, 2000)) +
labs(x = "Ano", y = "Taxa de Tuberculose por 10 mil habitantes", colour = "País") +
theme_minimal()
taxas %>%
ggplot(aes(x = year, y = taxa, colour = country)) +
geom_line() +
scale_x_continuous(breaks = c(1999, 2000)) +
labs(x = "Ano", y = "Taxa de Tuberculose por 10 mil habitantes", colour = "País") +
theme_minimal()
tidy2 = table2 %>%
pivot_wider(names_from = "type", values_from = "count")
table2 %>%
pivot_wider(names_from = "type", values_from = "count")
tidy2 %>%
mutate(taxa = cases/population*10000)
### Transformando os objetos table4a e table4b para o formato tidy
tidy4a = table4a %>%
pivot_longer(-country, names_to = "ano", values_to = "casos")
tidy4b = table4b %>%
pivot_longer(-country, names_to = "ano", values_to = "populacao")
### Juntando as tabelas
left_join(tidy4a, tidy4b, by = c("country", "ano"))
### Juntando as tabelas
tidy4 = left_join(tidy4a, tidy4b, by = c("country", "ano"))
### Calculando a taxa
tidy4 %>%
mutate(taxa = cases/population*10000)
tidy4 %>%
mutate(taxa = cases/population*10000)
### Transformando os objetos table4a e table4b para o formato tidy
tidy4a = table4a %>%
pivot_longer(-country, names_to = "ano", values_to = "casos")
tidy4b = table4b %>%
pivot_longer(-country, names_to = "ano", values_to = "populacao")
### Juntando as tabelas
tidy4 = left_join(tidy4a, tidy4b, by = c("country", "ano"))
tidy4
table1
tidy4
### Transformando os objetos table4a e table4b para o formato tidy
tidy4a = table4a %>%
pivot_longer(-country, names_to = "year", values_to = "cases")
tidy4b = table4b %>%
pivot_longer(-country, names_to = "year", values_to = "population")
### Juntando as tabelas
tidy4 = left_join(tidy4a, tidy4b, by = c("country", "year"))
### Calculando a taxa
tidy4 %>%
mutate(taxa = cases/population*10000)
tidy2 %>%
ggplot(aes(x = year, y = taxa, colour = country)) +
geom_line() +
scale_x_continuous(breaks = c(1999, 2000)) +
labs(x = "Ano", y = "Taxa de Tuberculose por 10 mil habitantes", colour = "País") +
theme_minimal()
### Transformando o objeto table2 para o formato tidy
tidy2 = table2 %>%
pivot_wider(names_from = "type", values_from = "count")
### Calculando a taxa
tidy2 = tidy2 %>%
mutate(taxa = cases/population*10000)
tidy2 %>%
ggplot(aes(x = year, y = taxa, colour = country)) +
geom_line() +
scale_x_continuous(breaks = c(1999, 2000)) +
labs(x = "Ano", y = "Taxa de Tuberculose por 10 mil habitantes", colour = "País") +
theme_minimal()
table2
### Extraindo o número de casos de tuberculose por país, por ano
table2 %>%
group_by(country) %>%
summarise(casos_totais = sum(cases))
### Extraindo o número de casos de tuberculose por país, por ano
table2 %>%
filter(type = "cases")
### Extraindo o número de casos de tuberculose por país, por ano
table2 %>%
filter(type == "cases")
### Extraindo o número de casos de tuberculose por país, por ano
table2cases = table2 %>%
filter(type == "cases")
table2population = table2 %>%
filter(type == "cases")
table2population = table2 %>%
filter(type == "cases")
### Dividindo o número de casos pelo tamanho da população e multiplicando o
### resultado por 10.000
table2taxa = table2cases$count/table2population$count
table2taxa
table2cases$count
table2population$count
### Extraindo o tamanho da população correspondente, por ano
table2population = table2 %>%
filter(type == "population")
### Dividindo o número de casos pelo tamanho da população e multiplicando o
### resultado por 10.000
table2taxa = table2cases$count/table2population$count
table2taxa
### Juntando os objetos table2cases e table2population
table2junto = left_join(table2cases, table2population)
### Juntando os objetos table2cases e table2population
table2junto = left_join(table2cases, table2population, by = c("country", "year")
table2junto
### Juntando os objetos table2cases e table2population
table2junto = left_join(table2cases, table2population, by = c("country", "year"))
table2junto
table2 %>%
filter(type == "cases")
### Dividindo o número de casos pelo tamanho da população e multiplicando o
### resultado por 10.000
table2taxa = table2junto %>%
mutate(taxa = count.x/count.y*10000)
table2taxa
tidy3 = table3 %>%
separate(rate, c("casos", "populacao"), sep = "/", convert = TRUE)
table3 %>%
separate(rate, c("casos", "populacao"), sep = "/", convert = TRUE)
tidy3 = table3 %>%
separate(rate, c("cases", "population"), sep = "/", convert = TRUE)
tidy3
library(purrr)
library(devtools)
library(usethis)
simula_dist <- function(list_dist) {
if (list_dist[[1]] == "poisson") {
rpois(n = list_dist[[3]], lambda = list_dist[[2]])
}
else if (list_dist[[1]] == "normal") {
rnorm(n = list_dist[[4]], mean = list_dist[[2]], sd = list_dist[[3]])
}
else if (list_dist[[1]] == "bernoulli") {
rbinom(n = list_dist[[3]], size = 1, p = list_dist[[2]])
}
else {
print("Não há simulações para essa distribuição")
}
}
source("simulador.R")
devtools::source_url("https://ime.unicamp.br/~ra137784/ME918/2023s2/lab01_ig.R")
planos <- input_lab01()
map(planos, simula_dist)
usethis::edit_r_environ(scope = "project")
usethis::edit_r_environ(scope = "project")
planos <- input_lab01()
map(planos, simula_dist)
library(purrr)
library(devtools)
library(usethis)
map(planos, simula_dist)
source("executa.R")
amostras <- map(planos, simula_dist)
for (i in 1:length(amostras)) {
result <- amostras[[i]]
dist = planos[[i]][[1]]
if (planos[[i]][[1]] == "poisson") {
lamb = planos[[i]][[2]]
n = planos[[i]][[3]]
save(distribution = dist,
lambda = lamb,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "normal") {
mu = planos[[i]][[2]]
sigma2 = planos[[i]][[3]]
n = planos[[i]][[4]]
save(distribution = dist,
mean = mu,
sd = sigma2,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "bernoulli") {
prob = planos[[i]][[2]]
n = planos[[i]][[3]]
size = 1
save(distribution = dist,
obs = n,
p = prob,
size,
file = paste0("resultados/simulacao",i,".RData"))
}
}
setwd("D:/Faculdade/Unicamp/8_Semestre/ME918_Produto_de_Dados/Atividade1")
for (i in 1:length(amostras)) {
result <- amostras[[i]]
dist = planos[[i]][[1]]
if (planos[[i]][[1]] == "poisson") {
lamb = planos[[i]][[2]]
n = planos[[i]][[3]]
save(distribution = dist,
lambda = lamb,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "normal") {
mu = planos[[i]][[2]]
sigma2 = planos[[i]][[3]]
n = planos[[i]][[4]]
save(distribution = dist,
mean = mu,
sd = sigma2,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "bernoulli") {
prob = planos[[i]][[2]]
n = planos[[i]][[3]]
size = 1
save(distribution = dist,
obs = n,
p = prob,
size,
file = paste0("resultados/simulacao",i,".RData"))
}
}
library(purrr)
library(devtools)
library(usethis)
simula_dist <- function(list_dist) {
if (list_dist[[1]] == "poisson") {
rpois(n = list_dist[[3]], lambda = list_dist[[2]])
}
else if (list_dist[[1]] == "normal") {
rnorm(n = list_dist[[4]], mean = list_dist[[2]], sd = list_dist[[3]])
}
else if (list_dist[[1]] == "bernoulli") {
rbinom(n = list_dist[[3]], size = 1, p = list_dist[[2]])
}
else {
print("Não há simulações para essa distribuição")
}
}
source("simulador.R")
devtools::source_url("https://ime.unicamp.br/~ra137784/ME918/2023s2/lab01_ig.R")
usethis::edit_r_environ(scope = "project")
planos <- input_lab01()
map(planos, simula_dist)
source("executa.R")
amostras <- map(planos, simula_dist)
for (i in 1:length(amostras)) {
result <- amostras[[i]]
dist = planos[[i]][[1]]
if (planos[[i]][[1]] == "poisson") {
lamb = planos[[i]][[2]]
n = planos[[i]][[3]]
save(distribution = dist,
lambda = lamb,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "normal") {
mu = planos[[i]][[2]]
sigma2 = planos[[i]][[3]]
n = planos[[i]][[4]]
save(distribution = dist,
mean = mu,
sd = sigma2,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "bernoulli") {
prob = planos[[i]][[2]]
n = planos[[i]][[3]]
size = 1
save(distribution = dist,
obs = n,
p = prob,
size,
file = paste0("resultados/simulacao",i,".RData"))
}
}
for (i in 1:length(amostras)) {
result <- amostras[[i]]
dist = planos[[i]][[1]]
if (planos[[i]][[1]] == "poisson") {
lamb = planos[[i]][[2]]
n = planos[[i]][[3]]
save(distribution = dist,
lambda = lamb,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "normal") {
mu = planos[[i]][[2]]
sigma2 = planos[[i]][[3]]
n = planos[[i]][[4]]
save(distribution = dist,
mean = mu,
sd = sigma2,
obs = n,
file = paste0("resultados/simulacao",i,".RData"))
}
else if (planos[[i]][[1]] == "bernoulli") {
prob = planos[[i]][[2]]
n = planos[[i]][[3]]
size = 1
save(distribution = dist,
obs = n,
p = prob,
size,
file = paste0("resultados/simulacao",i,".RData"))
}
}
